generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}

model User {
  id         Int      @id @default(autoincrement())
  email      String   @unique
  firstName  String
  lastName   String
  password      String?
  refreshToken  String? 
  role         Role     @default(USER)
  verified      Boolean  @default(false)
  provider  String?
  carts      Cart[]
  orders       Order[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Product {
  id          String   @id @default(uuid())
  name        String
  price       Float
  description String
  images      Image[]
  reviews     Review[]
  stock       Int       @default(0)  
  category    Category? @relation(fields: [categoryId], references: [id])
  categoryId  String?
  amountSold  Int      @default(0)
  cartItems   CartItem[] 
  orderItems  OrderItem[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Image {
  id        String   @id @default(uuid())
  url       String
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
}

model Review {
  id        String   @id @default(uuid())
  rating    Int
  comment   String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  createdAt DateTime @default(now())
}

model Category {
  id        String    @id @default(uuid())
  name      String    @unique
  products  Product[]
}

model Order {
  id          String       @id @default(uuid())
  user        User         @relation(fields: [userId], references: [id])
  userId      Int
  items       OrderItem[]
  totalAmount Float
  status      OrderStatus  @default(PENDING)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model OrderItem {
  id         String   @id @default(uuid())
  order      Order    @relation(fields: [orderId], references: [id])
  orderId    String
  product    Product  @relation(fields: [productId], references: [id])
  productId  String
  quantity   Int
  unitPrice  Float     // price at the time of order
  subtotal   Float     // quantity * unitPrice
}

model Cart {
  id        String    @id @default(uuid())
  user      User?     @relation(fields: [userId], references: [id])
  items     CartItem[]
  userId    Int? @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model CartItem {
  id        String   @id @default(uuid())
  cart      Cart     @relation(fields: [cartId], references: [id])
  cartId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int      @default(1)
}

